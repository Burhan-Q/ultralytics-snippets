// Ultralytics YOLO ðŸš€, AGPL-3.0 license

{
	"Ultralytics Auto Annotate": {
		"prefix": "ultra.util-auto-annotate",
		"body": [
			"from ultralytics.data.annotator import auto_annotate",
			"",
			"auto_annotate(data=\"$1\", det_model=\"yolov8${2|n,s,m,l,x|}.pt\", sam_model=\"${3|sam_b,sam_l,mobile_sam,FastSAM-s,FastSAM-x|}.pt\", device=\"${4|cuda,cpu|}\", output_dir=\"$5\")"
		],
		"description": "Use Ultralytics auto_annotate function to generate annotations."
	},

	"Ultralytics Plot Annotator": {
		"prefix": "ultra.util-annotator",
		"body": [
			"from ultralytics.utils.plotting import Annotator, colors",
			"",
			"$0# ${1:image}  # numpy.ndarray",
			"# ${2:xyxy_boxes}  # numpy.ndarray",
			"# ${3:class_idx}  # list[int], same order as boxes",
			"# names: dict = ${4:model}.names.copy()",
			"",
			"ann = Annotator(",
			"    im=$1,",
			"    line_width=${6:None},  # int",
			"    font_size=${7:None},  # int",
			"    font=\"${8:Arial.ttf}\",  # str",
			"    pil=${9:False},  # bool",
			"    example=\"${10:abc}\",  # str",
			")",
			"",
			"for n, box in enumerate(${2}):",
			"    label = f\"{names[n]}\"",
			"    ann.box_label(",
			"        box,",
			"        label,",
			"        color=colors(class_idx[n], bgr=True),",
			"        text_color=(${11:255},${12:255},${13:255}),",
			"        rotated=${14:False}",
			"    )",
			"",
			"img_annotated = ann.result()"
		],
		"description": "Use Ultralytics Annotator class to draw box annotations."
	},

	"Ultralytics Make Divisible": {
		"prefix": "ultra.util-make-divisible",
		"body": [
			"from ultralytics.utils.ops import make_divisible",
			"",
			"make_divisible(${1:width}, ${2:divisor})"
		],
		"description": "Use Ultralytics make_divisible function to make a number divisible by another."
	},

	"Ultralytics Set Callback": {
		"prefix": "ultra.util-callback",
		"body": [
			"${1:model}.add_callback(\"${2|on_pretrain_routine_start,on_pretrain_routine_end,on_train_start,on_train_epoch_start,on_train_batch_start,optimizer_step,on_before_zero_grad,on_train_batch_end,on_train_epoch_end,on_fit_epoch_end,on_model_save,on_train_end,on_params_update,teardown,on_val_start,on_val_batch_start,on_val_batch_end,on_val_end,on_predict_start,on_predict_batch_start,on_predict_postprocess_end,on_predict_batch_end,on_predict_end,on_export_start,on_export_end|}\", ${3:callable})"
		],
		"description": "Shortcut for adding custom model callback for a defined function."
	}

}